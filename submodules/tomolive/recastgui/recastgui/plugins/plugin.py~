import pandas as pd 

import matplotlib.pyplot as plt
import multiprocessing as mp
import time
import matplotlib
import numpy as np
import slicerecon
import copy
from structs.enums import PluginType as PT
import sklearn.preprocessing as pp
from plugins import beam_analysis as ba

class ProcessPlotter:
    def __init__(self):
        self.x = []
        self.y1 = []
        self.y2= []
        self.y3 = []
    def terminate(self):
        plt.close('all')

    def call_back(self):
        while self.pipe.poll():
            command = self.pipe.recv()
            if command is None:
                self.terminate()
                return False
            else:
                time.sleep(0.1)
                if len(self.x)!=0 and command[0]<self.x[-1]:
                    self.x = []
                    self.y1 = []
                    self.y2= []
                    self.y3 = []
                self.x.append(command[0])
                self.y1.append(command[1])
                self.y2.append(command[2])
                self.y3.append(command[3])
                self.ax[0,0].plot(self.x, self.y1)
                self.ax[0,1].plot(self.x, self.y2)
                self.ax[0,2].plot(self.x, self.y3)
                self.ax[1,0].imshow(command[4])
                self.ax[1,1].imshow(command[5])
                self.ax[1,2].imshow(command[6])
                self.ax[2,0].imshow(command[7])
                self.ax[2,1].imshow(command[8])
                self.ax[2,2].imshow(command[9])
                
                self.fig.suptitle(str(command[0])+ ' Projections')
        self.fig.canvas.draw()
        return True
        
    def __call__(self, pipe):
        print('starting plotter...')

        self.pipe = pipe
        self.fig, self.ax = plt.subplots(3,3)
        timer = self.fig.canvas.new_timer(interval=1000)
        timer.add_callback(self.call_back)
        timer.start()

        print('...done')
        plt.show()
        

class Handler():
    def __init__(self, args):
        self.args = args
        #matplotlib.use('GTK4Agg')
        #print(matplotlib.get_backend())
        self.callback_data = [None]*len(self.args.plugins.plugins)
        
        self.plot_pipe, plotter_pipe = mp.Pipe()
        self.plotter = ProcessPlotter()
        self.plot_process = mp.Process(target=self.plotter, args=(plotter_pipe,), daemon=True)
        self.plot_process.start()

        
        p = slicerecon.plugin("tcp://*:5652", "tcp://localhost:5555")
        p.set_slice_callback(self.callback)
        p.listen()

         
    def callback(self, orientation, shape, img, _):
        for index, row in self.args.plugins.plugins.iterrows():
            identifier=row['name']
            match identifier:
                case PT.BeamDamage.value:
                    self.callback_data[index], orientation, shape, img = ba.callback(self.args,self.callback_data[index], orientation,shape,img)
                    send = self.plot_pipe.send
                    if hasattr(self.callback_data[index], "df") and self.callback_data[index].nslices==0:
                        df = self.callback_data[index].df.iloc[-1]
                        img_new=copy.deepcopy(self.callback_data[index].img_new)
                        img_old=copy.deepcopy(self.callback_data[index].img_old)
                        for i in range(len(img_new)):
                            img_new[i]=np.reshape(img_new[i],shape)
                            img_old[i]=np.reshape(img_old[i],shape)
                        data = [df['projections'], 
                            df['srod'], 
                            df['pdinit'],
                            df['pdaverage'],
                            img_new[0],
                            img_new[1],
                            img_new[2], 
                            img_old[0],
                            img_old[1],
                            img_old[2]]
                        send(data)
                        #print(df['projections'],df['srod'],df['pdinit'],df['pdaverage'])
                    
                case _:
                    print('undefined plugin')
        return [orientation, shape, img]
    
